{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using a flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the catalog of useful triggers and templates. So you can just use them instead of reinventing new ones. Getting Started \u00b6 Install Argo CD Notifications kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/manifests/install.yaml Install Triggers and Templates from the catalog kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml Configure Slack integration kubectl apply -n argocd -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: service.slack: | token: $slack-token EOF Add Slack token to argocd-notifications-secret secret kubectl apply -n argocd -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: slack-token: <my-slack-token> type: Opaque EOF Subscribe to notifications by adding the notifications.argoproj.io/subscribe.on-sync-succeeded.slack annotation to the Argo CD application or project: kubectl patch app <my-app> -n argocd -p '{\"metadata\": {\"annotations\": {\"notifications.argoproj.io/subscribe.on-sync-succeeded.slack\":\"<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed. Helm v3 Getting Started \u00b6 argocd-notifications is now on Helm Hub as a Helm v3 chart, making it even easier to get started as installing and configuring happen together: helm repo add argo https://argoproj.github.io/argo-helm helm install argo/argocd-notifications --generate-name \\ --set triggers [ 0 ] .name = on-sync-succeeded \\ --set triggers [ 0 ] .enabled = true \\ --set secret.notifiers.slack.enabled = true \\ --set secret.notifiers.slack.token = <my-token> For more information or to contribute, check out the argoproj/argo-helm repository .","title":"Overview"},{"location":"#overview","text":"Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state. Using a flexible mechanism of triggers and templates you can configure when the notification should be sent as well as notification content. Argo CD Notifications includes the catalog of useful triggers and templates. So you can just use them instead of reinventing new ones.","title":"Overview"},{"location":"#getting-started","text":"Install Argo CD Notifications kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/manifests/install.yaml Install Triggers and Templates from the catalog kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml Configure Slack integration kubectl apply -n argocd -f - << EOF apiVersion: v1 kind: ConfigMap metadata: name: argocd-notifications-cm data: service.slack: | token: $slack-token EOF Add Slack token to argocd-notifications-secret secret kubectl apply -n argocd -f - << EOF apiVersion: v1 kind: Secret metadata: name: argocd-notifications-secret stringData: slack-token: <my-slack-token> type: Opaque EOF Subscribe to notifications by adding the notifications.argoproj.io/subscribe.on-sync-succeeded.slack annotation to the Argo CD application or project: kubectl patch app <my-app> -n argocd -p '{\"metadata\": {\"annotations\": {\"notifications.argoproj.io/subscribe.on-sync-succeeded.slack\":\"<my-channel>\"}}}' --type merge Try syncing and application and get the notification once sync is completed.","title":"Getting Started"},{"location":"#helm-v3-getting-started","text":"argocd-notifications is now on Helm Hub as a Helm v3 chart, making it even easier to get started as installing and configuring happen together: helm repo add argo https://argoproj.github.io/argo-helm helm install argo/argocd-notifications --generate-name \\ --set triggers [ 0 ] .name = on-sync-succeeded \\ --set triggers [ 0 ] .enabled = true \\ --set secret.notifiers.slack.enabled = true \\ --set secret.notifiers.slack.token = <my-token> For more information or to contribute, check out the argoproj/argo-helm repository .","title":"Helm v3 Getting Started"},{"location":"catalog/","text":"Triggers and Templates Catalog \u00b6 Triggers \u00b6 NAME DESCRIPTION TEMPLATE on-deployed Application is synced and healthy. Triggered once per commit. app-sync-succeeded on-health-degraded Application has degraded app-health-degraded on-sync-failed Application syncing has failed app-sync-failed on-sync-running Application is being synced app-sync-running on-sync-status-unknown Application status is 'Unknown' app-sync-status-unknown on-sync-succeeded Application syncing has succeeded app-sync-succeeded Templates \u00b6 app-health-degraded \u00b6 title : Application {{.app.metadata.name}} has degraded. body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} has degraded. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . app-sync-failed \u00b6 title : Failed to sync application {{.app.metadata.name}}. body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} The sync operation of application {{ .app.metadata.name }} has failed at {{ .app.status.operationState.finishedAt }} with the following error: {{ .app.status.operationState.message }} Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true . app-sync-running \u00b6 title : Start syncing application {{.app.metadata.name}}. body : The sync operation of application {{ .app.metadata.name }} has started at {{ .app.status.operationState.startedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true . app-sync-status-unknown \u00b6 title : Application {{.app.metadata.name}} sync status is 'Unknown' body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} sync is 'Unknown'. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . {{ if ne .serviceType \"slack\" }} {{ range $ c := .app.status.conditions }} * {{ $ c.message }} {{ end }} {{ end }} app-sync-succeeded \u00b6 title : Application {{.app.metadata.name}} has been successfully synced. body : {{ if eq .serviceType \"slack\" }} :white_check_mark: {{ end }} Application {{ .app.metadata.name }} has been successfully synced at {{ .app.status.operationState.finishedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"Triggers and Templates Catalog"},{"location":"catalog/#triggers-and-templates-catalog","text":"","title":"Triggers and Templates Catalog"},{"location":"catalog/#triggers","text":"NAME DESCRIPTION TEMPLATE on-deployed Application is synced and healthy. Triggered once per commit. app-sync-succeeded on-health-degraded Application has degraded app-health-degraded on-sync-failed Application syncing has failed app-sync-failed on-sync-running Application is being synced app-sync-running on-sync-status-unknown Application status is 'Unknown' app-sync-status-unknown on-sync-succeeded Application syncing has succeeded app-sync-succeeded","title":"Triggers"},{"location":"catalog/#templates","text":"","title":"Templates"},{"location":"catalog/#app-health-degraded","text":"title : Application {{.app.metadata.name}} has degraded. body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} has degraded. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} .","title":"app-health-degraded"},{"location":"catalog/#app-sync-failed","text":"title : Failed to sync application {{.app.metadata.name}}. body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} The sync operation of application {{ .app.metadata.name }} has failed at {{ .app.status.operationState.finishedAt }} with the following error: {{ .app.status.operationState.message }} Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-failed"},{"location":"catalog/#app-sync-running","text":"title : Start syncing application {{.app.metadata.name}}. body : The sync operation of application {{ .app.metadata.name }} has started at {{ .app.status.operationState.startedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-running"},{"location":"catalog/#app-sync-status-unknown","text":"title : Application {{.app.metadata.name}} sync status is 'Unknown' body : {{ if eq .serviceType \"slack\" }} :exclamation: {{ end }} Application {{ .app.metadata.name }} sync is 'Unknown'. Application details: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} . {{ if ne .serviceType \"slack\" }} {{ range $ c := .app.status.conditions }} * {{ $ c.message }} {{ end }} {{ end }}","title":"app-sync-status-unknown"},{"location":"catalog/#app-sync-succeeded","text":"title : Application {{.app.metadata.name}} has been successfully synced. body : {{ if eq .serviceType \"slack\" }} :white_check_mark: {{ end }} Application {{ .app.metadata.name }} has been successfully synced at {{ .app.status.operationState.finishedAt }} . Sync operation details are available at: {{ .context.argocdUrl }} /applications/ {{ .app.metadata.name }} ?operation=true .","title":"app-sync-succeeded"},{"location":"functions/","text":"time \u00b6 Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time . repo \u00b6 Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags","title":"Functions"},{"location":"functions/#time","text":"Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time .","title":"time"},{"location":"functions/#repo","text":"Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags","title":"repo"},{"location":"monitoring/","text":"Monitoring \u00b6 The Argo CD Notification controller serves Prometheus metrics on port 9001. Note Metrics port might be changed using the --metrics-port flag in argocd-notifications-controller deployment. Metrics \u00b6 The following metrics are available: argocd_notifications_deliveries_total \u00b6 Number of delivered notifications. Labels: template - notification template name notifier - notification service name succeeded - flag that indicates if notification was successfully sent or failed. argocd_notifications_trigger_eval_total \u00b6 Number of trigger evaluations. Labels: name - trigger name triggered - flag that indicates if trigger condition returned true of false. Examples: \u00b6 Grafana Dashboard: grafana-dashboard.json","title":"Monitoring"},{"location":"monitoring/#monitoring","text":"The Argo CD Notification controller serves Prometheus metrics on port 9001. Note Metrics port might be changed using the --metrics-port flag in argocd-notifications-controller deployment.","title":"Monitoring"},{"location":"monitoring/#metrics","text":"The following metrics are available:","title":"Metrics"},{"location":"monitoring/#argocd_notifications_deliveries_total","text":"Number of delivered notifications. Labels: template - notification template name notifier - notification service name succeeded - flag that indicates if notification was successfully sent or failed.","title":"argocd_notifications_deliveries_total"},{"location":"monitoring/#argocd_notifications_trigger_eval_total","text":"Number of trigger evaluations. Labels: name - trigger name triggered - flag that indicates if trigger condition returned true of false.","title":"argocd_notifications_trigger_eval_total"},{"location":"monitoring/#examples","text":"Grafana Dashboard: grafana-dashboard.json","title":"Examples:"},{"location":"subscriptions/","text":"The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation. For example, the following annotation subscribes two Slack channels to notifications about every successful synchronization of the Argo CD application: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : annotations : notifications.argoproj.io/subscribe.on-sync-succeeded.slack : my-channel1;my-channel2 Annotation key consists of following parts: on-sync-succeeded - trigger name slack - notification service name my-channel1;my-channel2 - a semicolon separated list of recipients You can create subscriptions for all applications of the Argo CD project by adding the same annotation to AppProject CRD: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : annotations : notifications.argoproj.io/subscribe.on-sync-succeeded.slack : my-channel1;my-channel2 Default Subscriptions (v0.6.1) \u00b6 The subscriptions might be configured globally in the argocd-notifications-cm ConfigMap using subscriptions field. The default subscriptions are applied to all applications. The trigger and applications might be configured using the triggers and selector fields: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Contains centrally managed global application subscriptions subscriptions : | # subscription for on-sync-status-unknown trigger notifications - recipients: - slack:test2 - email:test@gmail.com triggers: - on-sync-status-unknown # subscription restricted to applications with matching labels only - recipients: - slack:test3 selector: test=true triggers: - on-sync-status-unknown","title":"Subscriptions"},{"location":"subscriptions/#default-subscriptions-v061","text":"The subscriptions might be configured globally in the argocd-notifications-cm ConfigMap using subscriptions field. The default subscriptions are applied to all applications. The trigger and applications might be configured using the triggers and selector fields: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Contains centrally managed global application subscriptions subscriptions : | # subscription for on-sync-status-unknown trigger notifications - recipients: - slack:test2 - email:test@gmail.com triggers: - on-sync-status-unknown # subscription restricted to applications with matching labels only - recipients: - slack:test3 selector: test=true triggers: - on-sync-status-unknown","title":"Default Subscriptions (v0.6.1)"},{"location":"templates/","text":"The notification template is used to generate the notification content and configured in argocd-notifications-cm ConfigMap. The template is leveraging html/template golang package and allow to define notification title and body. Templates are meant to be reusable and can be referenced by multiple triggers. The following template is used to notify the user about application sync status. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : template.my-custom-template-slack-template : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. Each template has access to the following fields: app holds the application object. context is user defined string map and might include any string keys and values. serviceType holds the notification service type name. The field can be used to conditionally render service specific fields. Functions \u00b6 Templates have access to the set of built-in functions: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : template.my-custom-template-slack-template : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: \"Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\" time \u00b6 Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time . repo \u00b6 Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags Notification Service Specific Messages \u00b6 Templates might define notification service-specific fields, for example, attachments for Slack or URL path and body for Webhook. See corresponding service documentation for more information.","title":"Templates"},{"location":"templates/#functions","text":"Templates have access to the set of built-in functions: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : template.my-custom-template-slack-template : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: \"Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"","title":"Functions"},{"location":"templates/#time","text":"Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time .","title":"time"},{"location":"templates/#repo","text":"Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags","title":"repo"},{"location":"templates/#notification-service-specific-messages","text":"Templates might define notification service-specific fields, for example, attachments for Slack or URL path and body for Webhook. See corresponding service documentation for more information.","title":"Notification Service Specific Messages"},{"location":"triggers/","text":"The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification templates reference. The trigger is configured in argocd-notifications-cm ConfigMap. For example the following trigger sends a notification when application sync status changes to Unknown using app-sync-status template: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : trigger.on-sync-status-unknown : | - when: app.status.sync.status == 'Unknown' # trigger condition send: [app-sync-status, github-commit-status] # template names Each condition might use several templates. Typically each template is responsible for generating a service-specific notification part. In the example above app-sync-status template \"knows\" how to create email and slack notification and github-commit-status knows how to generate payload for Github webhook. Conditions Bundles \u00b6 Triggers are typically managed by administrators and encapsulate information about when and which notification should be sent. The end users just need to subscribe to the trigger and specify the notification destination. In order to improve user experience triggers might include multiple conditions with a different set of templates for each condition. For example, the following trigger covers all stages of sync status operation and use a different template for different cases: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : trigger.sync-operation-change : | - when: app.status.operationState.phase in ['Succeeded'] send: [github-commit-status] - when: app.status.operationState.phase in ['Running'] send: [github-commit-status] - when: app.status.operationState.phase in ['Error', 'Failed'] send: [app-sync-failed, github-commit-status] Avoid Sending Same Notification Too Often \u00b6 In some cases, the trigger condition might be \"flapping\". The example below illustrates the problem. The trigger is supposed to generate a notification once when Argo CD application is successfully synchronized and healthy. However the application health status might intermittently switch to Progressing and then back to Healthy so the trigger might unnecessary generate multiple notifications. The oncePer field configures triggers to generate the notification only when the corresponding application field changes. The on-deployed trigger from the example below sends the notification only once per observed Git revision of the deployment repository. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Optional 'oncePer' property ensure that notification is sent only once per specified field value # E.g. following is triggered once per sync revision trigger.on-deployed : | when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy' oncePer: app.status.sync.revision send: [app-sync-succeeded] Functions \u00b6 Triggers have access to the set of built-in functions. Example: when : time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() >= 5 time \u00b6 Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time . repo \u00b6 Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags","title":"Triggers"},{"location":"triggers/#conditions-bundles","text":"Triggers are typically managed by administrators and encapsulate information about when and which notification should be sent. The end users just need to subscribe to the trigger and specify the notification destination. In order to improve user experience triggers might include multiple conditions with a different set of templates for each condition. For example, the following trigger covers all stages of sync status operation and use a different template for different cases: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : trigger.sync-operation-change : | - when: app.status.operationState.phase in ['Succeeded'] send: [github-commit-status] - when: app.status.operationState.phase in ['Running'] send: [github-commit-status] - when: app.status.operationState.phase in ['Error', 'Failed'] send: [app-sync-failed, github-commit-status]","title":"Conditions Bundles"},{"location":"triggers/#avoid-sending-same-notification-too-often","text":"In some cases, the trigger condition might be \"flapping\". The example below illustrates the problem. The trigger is supposed to generate a notification once when Argo CD application is successfully synchronized and healthy. However the application health status might intermittently switch to Progressing and then back to Healthy so the trigger might unnecessary generate multiple notifications. The oncePer field configures triggers to generate the notification only when the corresponding application field changes. The on-deployed trigger from the example below sends the notification only once per observed Git revision of the deployment repository. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Optional 'oncePer' property ensure that notification is sent only once per specified field value # E.g. following is triggered once per sync revision trigger.on-deployed : | when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy' oncePer: app.status.sync.revision send: [app-sync-succeeded]","title":"Avoid Sending Same Notification Too Often"},{"location":"triggers/#functions","text":"Triggers have access to the set of built-in functions. Example: when : time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() >= 5","title":"Functions"},{"location":"triggers/#time","text":"Time related functions. time.Now() Time Executes function built-in Golang time.Now function. Returns an instance of Golang Time . time.Parse(val string) Time Parses specified string using RFC3339 layout. Returns an instance of Golang Time .","title":"time"},{"location":"triggers/#repo","text":"Functions that provide additional information about Application source repository. repo.RepoURLToHTTPS(url string) string Transforms given GIT URL into HTTPs format. repo.FullNameByRepoURL(url string) string Returns repository URL full name (<owner>/<repoName>) . Currently supports only Github, Gitlab and Bitbucket. repo.GetCommitMetadata(sha string) CommitMetadata Returns commit metadata. The commit must belong to the application source repository. CommitMetadata fields: Message string commit message Author string - commit author Date time.Time - commit creation date Tags []string - Associated tags","title":"repo"},{"location":"troubleshooting-commands/","text":"tools template get \u00b6 Prints information about configured templates Synopsis \u00b6 Prints information about configured templates tools template get [ flags ] Examples \u00b6 # prints all templates argocd - notifications tools template get # print YAML formatted app-sync-succeeded template definition argocd - notifications tools template get app - sync - succeeded - o = yaml Options \u00b6 -h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\") Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools template notify \u00b6 Generates notification using the specified template and send it to specified recipients Synopsis \u00b6 Generates notification using the specified template and send it to specified recipients tools template notify NAME APPLICATION [ flags ] Examples \u00b6 # Trigger notification using in-cluster config map and secret argocd - notifications tools template notify app - sync - succeeded guestbook -- recipient slack : argocd - notifications # Render notification render generated notification in console argocd - notifications tools template notify app - sync - succeeded guestbook Options \u00b6 -h, --help help for notify --recipient stringArray List of recipients (default [console:stdout]) Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools trigger get \u00b6 Prints information about configured triggers Synopsis \u00b6 Prints information about configured triggers tools trigger get [ flags ] Examples \u00b6 # prints all triggers argocd - notifications tools trigger get # print YAML formatted on-sync-failed trigger definition argocd - notifications tools trigger get on - sync - failed - o = yaml Options \u00b6 -h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\") Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools trigger run \u00b6 Evaluates specified trigger condition and prints the result Synopsis \u00b6 Evaluates specified trigger condition and prints the result tools trigger run NAME APPLICATION [ flags ] Examples \u00b6 # Execute trigger configured in 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml # Execute trigger using argocd-notifications-cm.yaml instead of 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml \\ -- config - map ./ argocd - notifications - cm . yaml Options \u00b6 -h, --help help for run Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Troubleshooting commands"},{"location":"troubleshooting-commands/#tools-template-get","text":"Prints information about configured templates","title":"tools template get"},{"location":"troubleshooting-commands/#synopsis","text":"Prints information about configured templates tools template get [ flags ]","title":"Synopsis"},{"location":"troubleshooting-commands/#examples","text":"# prints all templates argocd - notifications tools template get # print YAML formatted app-sync-succeeded template definition argocd - notifications tools template get app - sync - succeeded - o = yaml","title":"Examples"},{"location":"troubleshooting-commands/#options","text":"-h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"troubleshooting-commands/#options-inherited-from-parent-commands","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting-commands/#tools-template-notify","text":"Generates notification using the specified template and send it to specified recipients","title":"tools template notify"},{"location":"troubleshooting-commands/#synopsis_1","text":"Generates notification using the specified template and send it to specified recipients tools template notify NAME APPLICATION [ flags ]","title":"Synopsis"},{"location":"troubleshooting-commands/#examples_1","text":"# Trigger notification using in-cluster config map and secret argocd - notifications tools template notify app - sync - succeeded guestbook -- recipient slack : argocd - notifications # Render notification render generated notification in console argocd - notifications tools template notify app - sync - succeeded guestbook","title":"Examples"},{"location":"troubleshooting-commands/#options_1","text":"-h, --help help for notify --recipient stringArray List of recipients (default [console:stdout])","title":"Options"},{"location":"troubleshooting-commands/#options-inherited-from-parent-commands_1","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting-commands/#tools-trigger-get","text":"Prints information about configured triggers","title":"tools trigger get"},{"location":"troubleshooting-commands/#synopsis_2","text":"Prints information about configured triggers tools trigger get [ flags ]","title":"Synopsis"},{"location":"troubleshooting-commands/#examples_2","text":"# prints all triggers argocd - notifications tools trigger get # print YAML formatted on-sync-failed trigger definition argocd - notifications tools trigger get on - sync - failed - o = yaml","title":"Examples"},{"location":"troubleshooting-commands/#options_2","text":"-h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"troubleshooting-commands/#options-inherited-from-parent-commands_2","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting-commands/#tools-trigger-run","text":"Evaluates specified trigger condition and prints the result","title":"tools trigger run"},{"location":"troubleshooting-commands/#synopsis_3","text":"Evaluates specified trigger condition and prints the result tools trigger run NAME APPLICATION [ flags ]","title":"Synopsis"},{"location":"troubleshooting-commands/#examples_3","text":"# Execute trigger configured in 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml # Execute trigger using argocd-notifications-cm.yaml instead of 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml \\ -- config - map ./ argocd - notifications - cm . yaml","title":"Examples"},{"location":"troubleshooting-commands/#options_3","text":"-h, --help help for run","title":"Options"},{"location":"troubleshooting-commands/#options-inherited-from-parent-commands_3","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 (v0.7.0) The argocd-notifications binary includes a set of CLI commands that helps to configure the controller settings and troubleshooting issues. All CLI commands are available as argocd-notifications tools sub-commands: argocd-notifications tools <sub-command-name> Global flags \u00b6 Following global flags are available for all sub-commands: * config-map - path to the file containing argocd-notifications-cm ConfigMap. If not specified then the command loads argocd-notification-cm ConfigMap using the local Kubernetes config file. * secret - path to the file containing argocd-notifications-secret ConfigMap. If not specified then the command loads argocd-notification-secret Secret using the local Kubernetes config file. Additionally, you can specify :empty value to use empty secret with no notification service settings. Examples: Get list of triggers configured in the local config map: argocd - notifications tools trigger get \\ -- config - map ./ argocd - notifications - cm . yaml -- secret : empty Trigger notification using in-cluster config map and secret: argocd - notifications tools template notify \\ app - sync - succeeded guestbook -- recipient slack : argocd - notifications How to use it \u00b6 On your laptop \u00b6 The binary is available in argoprojlabs/argocd-notifications image. Use the docker run and volume mount to execute binary on any platform. Example: docker run --rm -it -w /src -v $( pwd ) :/src \\ argoprojlabs/argocd-notifications:<version> \\ /app/argocd-notifications tools trigger get \\ --config-map ./argocd-notifications-cm.yaml --secret :empty In your cluster \u00b6 SSH into the running argocd-notifications-controller pod and use kubectl exec command to validate in-cluster configuration. Example kubectl exec -it argocd-notifications-controller-<pod-hash> \\ /app/argocd-notifications tools trigger get Commands \u00b6 tools template get \u00b6 Prints information about configured templates Synopsis \u00b6 Prints information about configured templates tools template get [ flags ] Examples \u00b6 # prints all templates argocd - notifications tools template get # print YAML formatted app-sync-succeeded template definition argocd - notifications tools template get app - sync - succeeded - o = yaml Options \u00b6 -h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\") Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools template notify \u00b6 Generates notification using the specified template and send it to specified recipients Synopsis \u00b6 Generates notification using the specified template and send it to specified recipients tools template notify NAME APPLICATION [ flags ] Examples \u00b6 # Trigger notification using in-cluster config map and secret argocd - notifications tools template notify app - sync - succeeded guestbook -- recipient slack : argocd - notifications # Render notification render generated notification in console argocd - notifications tools template notify app - sync - succeeded guestbook Options \u00b6 -h, --help help for notify --recipient stringArray List of recipients (default [console:stdout]) Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools trigger get \u00b6 Prints information about configured triggers Synopsis \u00b6 Prints information about configured triggers tools trigger get [ flags ] Examples \u00b6 # prints all triggers argocd - notifications tools trigger get # print YAML formatted on-sync-failed trigger definition argocd - notifications tools trigger get on - sync - failed - o = yaml Options \u00b6 -h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\") Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server tools trigger run \u00b6 Evaluates specified trigger condition and prints the result Synopsis \u00b6 Evaluates specified trigger condition and prints the result tools trigger run NAME APPLICATION [ flags ] Examples \u00b6 # Execute trigger configured in 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml # Execute trigger using argocd-notifications-cm.yaml instead of 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml \\ -- config - map ./ argocd - notifications - cm . yaml Options \u00b6 -h, --help help for run Options inherited from parent commands \u00b6 --argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"(v0.7.0) The argocd-notifications binary includes a set of CLI commands that helps to configure the controller settings and troubleshooting issues. All CLI commands are available as argocd-notifications tools sub-commands: argocd-notifications tools <sub-command-name>","title":"Troubleshooting"},{"location":"troubleshooting/#global-flags","text":"Following global flags are available for all sub-commands: * config-map - path to the file containing argocd-notifications-cm ConfigMap. If not specified then the command loads argocd-notification-cm ConfigMap using the local Kubernetes config file. * secret - path to the file containing argocd-notifications-secret ConfigMap. If not specified then the command loads argocd-notification-secret Secret using the local Kubernetes config file. Additionally, you can specify :empty value to use empty secret with no notification service settings. Examples: Get list of triggers configured in the local config map: argocd - notifications tools trigger get \\ -- config - map ./ argocd - notifications - cm . yaml -- secret : empty Trigger notification using in-cluster config map and secret: argocd - notifications tools template notify \\ app - sync - succeeded guestbook -- recipient slack : argocd - notifications","title":"Global flags"},{"location":"troubleshooting/#how-to-use-it","text":"","title":"How to use it"},{"location":"troubleshooting/#on-your-laptop","text":"The binary is available in argoprojlabs/argocd-notifications image. Use the docker run and volume mount to execute binary on any platform. Example: docker run --rm -it -w /src -v $( pwd ) :/src \\ argoprojlabs/argocd-notifications:<version> \\ /app/argocd-notifications tools trigger get \\ --config-map ./argocd-notifications-cm.yaml --secret :empty","title":"On your laptop"},{"location":"troubleshooting/#in-your-cluster","text":"SSH into the running argocd-notifications-controller pod and use kubectl exec command to validate in-cluster configuration. Example kubectl exec -it argocd-notifications-controller-<pod-hash> \\ /app/argocd-notifications tools trigger get","title":"In your cluster"},{"location":"troubleshooting/#commands","text":"","title":"Commands"},{"location":"troubleshooting/#tools-template-get","text":"Prints information about configured templates","title":"tools template get"},{"location":"troubleshooting/#synopsis","text":"Prints information about configured templates tools template get [ flags ]","title":"Synopsis"},{"location":"troubleshooting/#examples","text":"# prints all templates argocd - notifications tools template get # print YAML formatted app-sync-succeeded template definition argocd - notifications tools template get app - sync - succeeded - o = yaml","title":"Examples"},{"location":"troubleshooting/#options","text":"-h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"troubleshooting/#options-inherited-from-parent-commands","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting/#tools-template-notify","text":"Generates notification using the specified template and send it to specified recipients","title":"tools template notify"},{"location":"troubleshooting/#synopsis_1","text":"Generates notification using the specified template and send it to specified recipients tools template notify NAME APPLICATION [ flags ]","title":"Synopsis"},{"location":"troubleshooting/#examples_1","text":"# Trigger notification using in-cluster config map and secret argocd - notifications tools template notify app - sync - succeeded guestbook -- recipient slack : argocd - notifications # Render notification render generated notification in console argocd - notifications tools template notify app - sync - succeeded guestbook","title":"Examples"},{"location":"troubleshooting/#options_1","text":"-h, --help help for notify --recipient stringArray List of recipients (default [console:stdout])","title":"Options"},{"location":"troubleshooting/#options-inherited-from-parent-commands_1","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting/#tools-trigger-get","text":"Prints information about configured triggers","title":"tools trigger get"},{"location":"troubleshooting/#synopsis_2","text":"Prints information about configured triggers tools trigger get [ flags ]","title":"Synopsis"},{"location":"troubleshooting/#examples_2","text":"# prints all triggers argocd - notifications tools trigger get # print YAML formatted on-sync-failed trigger definition argocd - notifications tools trigger get on - sync - failed - o = yaml","title":"Examples"},{"location":"troubleshooting/#options_2","text":"-h, --help help for get -o, --output string Output format. One of:json|yaml|wide|name (default \"wide\")","title":"Options"},{"location":"troubleshooting/#options-inherited-from-parent-commands_2","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"troubleshooting/#tools-trigger-run","text":"Evaluates specified trigger condition and prints the result","title":"tools trigger run"},{"location":"troubleshooting/#synopsis_3","text":"Evaluates specified trigger condition and prints the result tools trigger run NAME APPLICATION [ flags ]","title":"Synopsis"},{"location":"troubleshooting/#examples_3","text":"# Execute trigger configured in 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml # Execute trigger using argocd-notifications-cm.yaml instead of 'argocd-notification-cm' ConfigMap argocd - notifications tools trigger run on - sync - status - unknown ./ sample - app . yaml \\ -- config - map ./ argocd - notifications - cm . yaml","title":"Examples"},{"location":"troubleshooting/#options_3","text":"-h, --help help for run","title":"Options"},{"location":"troubleshooting/#options-inherited-from-parent-commands_3","text":"--argocd-repo-server string Argo CD repo server address (default \"argocd-repo-server:8081\") --as string Username to impersonate for the operation --as-group stringArray Group to impersonate for the operation, this flag can be repeated to specify multiple groups. --certificate-authority string Path to a cert file for the certificate authority --client-certificate string Path to a client certificate file for TLS --client-key string Path to a client key file for TLS --cluster string The name of the kubeconfig cluster to use --config-map string argocd-notifications-cm.yaml file path --context string The name of the kubeconfig context to use --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure --kubeconfig string Path to a kube config. Only required if out-of-cluster -n, --namespace string If present, the namespace scope for this CLI request --password string Password for basic authentication to the API server --request-timeout string The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\") --secret string argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty' --server string The address and port of the Kubernetes API server --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used. --token string Bearer token for authentication to the API server --user string The name of the kubeconfig user to use --username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"bots/opsgenie-bot/","text":"Opsgenie bot \u00b6 Do you need Opsgenie bot? Please consider contributing or create feature request !","title":"Opsgenie bot"},{"location":"bots/opsgenie-bot/#opsgenie-bot","text":"Do you need Opsgenie bot? Please consider contributing or create feature request !","title":"Opsgenie bot"},{"location":"bots/overview/","text":"Bot (v0.5) \u00b6 The optional bot component simplifies managing subscriptions. The end users can use bot commands to manage subscriptions even if they don't have access to the Kubernetes API and cannot modify annotations. The bot is not installed by default. Use the install-bot.yaml to intall it: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/stable/manifests/install-bot.yaml Slack bot Opsgenie bot Telegram bot","title":"Bot (v0.5)"},{"location":"bots/overview/#bot-v05","text":"The optional bot component simplifies managing subscriptions. The end users can use bot commands to manage subscriptions even if they don't have access to the Kubernetes API and cannot modify annotations. The bot is not installed by default. Use the install-bot.yaml to intall it: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/stable/manifests/install-bot.yaml Slack bot Opsgenie bot Telegram bot","title":"Bot (v0.5)"},{"location":"bots/slack-bot/","text":"Slack bot (v0.5) \u00b6 The Slack bot leverages slash commands . The bot allows slack users to view existing channel subscriptions and subscribe or unsubscribe channels. Make sure bot component is installed . Configure slack integration . In the slack application settings page navigate to the 'Slash Commands' section and click 'Create New Command' button. Fill in new slack command details In the slack application settings page navigate to the 'Basic Information' section and copy 'Signing Secret' from the 'App Credentials' section. Add signingSecret to the slack configuration. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.slack : token : $slack-token signingSecret : $slack-signing-secret Commands \u00b6 The bot supports following commands: list-subscriptions - list channel subscriptions subscribe <my-app> <optional-trigger> - subscribes channel to the app notifications subscribe proj:<my-app> <optional-trigger> - subscribes channel to the app project notifications unsubscribe <my-app> <optional-trigger> - unsubscribes channel from the app notifications unsubscribe proj:<my-app> <optional-trigger> - unsubscribes channel from the app project notifications","title":"Slack bot (v0.5)"},{"location":"bots/slack-bot/#slack-bot-v05","text":"The Slack bot leverages slash commands . The bot allows slack users to view existing channel subscriptions and subscribe or unsubscribe channels. Make sure bot component is installed . Configure slack integration . In the slack application settings page navigate to the 'Slash Commands' section and click 'Create New Command' button. Fill in new slack command details In the slack application settings page navigate to the 'Basic Information' section and copy 'Signing Secret' from the 'App Credentials' section. Add signingSecret to the slack configuration. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.slack : token : $slack-token signingSecret : $slack-signing-secret","title":"Slack bot (v0.5)"},{"location":"bots/slack-bot/#commands","text":"The bot supports following commands: list-subscriptions - list channel subscriptions subscribe <my-app> <optional-trigger> - subscribes channel to the app notifications subscribe proj:<my-app> <optional-trigger> - subscribes channel to the app project notifications unsubscribe <my-app> <optional-trigger> - unsubscribes channel from the app notifications unsubscribe proj:<my-app> <optional-trigger> - unsubscribes channel from the app project notifications","title":"Commands"},{"location":"bots/telegram-bot/","text":"Telegram bot \u00b6 Do you need Telegram bot? Please consider contributing or create feature request !","title":"Telegram bot"},{"location":"bots/telegram-bot/#telegram-bot","text":"Do you need Telegram bot? Please consider contributing or create feature request !","title":"Telegram bot"},{"location":"services/grafana/","text":"Grafana \u00b6 Requires version v0.6+ To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana . Login to your Grafana instance as admin On the left menu, go to Configuration / API Keys Click \"Add API Key\" Fill the Key with name ArgoCD Notification , role Editor and Time to Live 10y (for example) Click on Add button Copy your API Key and define it in argocd-notifications-cm ConfigMap apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.grafana : | apiUrl: https://grafana.example.com/api apiKey: <grafana-api-key>","title":"Grafana"},{"location":"services/grafana/#grafana","text":"Requires version v0.6+ To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana . Login to your Grafana instance as admin On the left menu, go to Configuration / API Keys Click \"Add API Key\" Fill the Key with name ArgoCD Notification , role Editor and Time to Live 10y (for example) Click on Add button Copy your API Key and define it in argocd-notifications-cm ConfigMap apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.grafana : | apiUrl: https://grafana.example.com/api apiKey: <grafana-api-key>","title":"Grafana"},{"location":"services/opsgenie/","text":"Opsgenie \u00b6 To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team . Login to Opsgenie at https://app.opsgenie.com or https://app.eu.opsgenie.com (if you have an account in the european union) Make sure you already have a team, if not follow this guide https://docs.opsgenie.com/docs/teams Click \"Teams\" in the Menu on the left Select the team that you want to notify In the teams configuration menu select \"Integrations\" click \"Add Integration\" in the top right corner Select \"API\" integration Give your integration a name, copy the \"API key\" and safe it somewhere for later Make sure the checkboxes for \"Create and Update Access\" and \"enable\" are selected, disable the other checkboxes to remove unnecessary permissions Click \"Safe Integration\" at the bottom Check your browser for the correct server apiURL. If it is \"app.opsgenie.com\" then use the us/international api url api.opsgenie.com in the next step, otherwise use api.eu.opsgenie.com (european api). You are finished with configuring opsgenie. Now you need to configure argocd-notifications. Use the apiUrl, the team name and the apiKey to configure the opsgenie integration in the argocd-notifications-secret secret. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.opsgenie : | apiUrl: <api-url> apiKeys: <your-team>: <integration-api-key>","title":"Opsgenie"},{"location":"services/opsgenie/#opsgenie","text":"To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team . Login to Opsgenie at https://app.opsgenie.com or https://app.eu.opsgenie.com (if you have an account in the european union) Make sure you already have a team, if not follow this guide https://docs.opsgenie.com/docs/teams Click \"Teams\" in the Menu on the left Select the team that you want to notify In the teams configuration menu select \"Integrations\" click \"Add Integration\" in the top right corner Select \"API\" integration Give your integration a name, copy the \"API key\" and safe it somewhere for later Make sure the checkboxes for \"Create and Update Access\" and \"enable\" are selected, disable the other checkboxes to remove unnecessary permissions Click \"Safe Integration\" at the bottom Check your browser for the correct server apiURL. If it is \"app.opsgenie.com\" then use the us/international api url api.opsgenie.com in the next step, otherwise use api.eu.opsgenie.com (european api). You are finished with configuring opsgenie. Now you need to configure argocd-notifications. Use the apiUrl, the team name and the apiKey to configure the opsgenie integration in the argocd-notifications-secret secret. apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.opsgenie : | apiUrl: <api-url> apiKeys: <your-team>: <integration-api-key>","title":"Opsgenie"},{"location":"services/overview/","text":"The notification services represent integration with services such as slack, email or custom webhook. Services are configured in argocd-notifications-cm ConfigMap using service.<type>.(<optiona-name>) keys and might referense sensitive data from argocd-notifications-secret Secret. Following example demonstrates slack service configuration: service.slack : | token: $slack-token The slack indicates that service sends slack notification; name is missing and defaults to slack . Sensitive Data \u00b6 Sensitive data like authentication tokens should be stored in argocd-notifications-secret Secret and can be referenced in service configuration using $<secret-key> format. For example $slack-token referencing value of key slack-token in argocd-notifications-secret Secret. Custom Names \u00b6 Service custom names allow configuring two instances of the same service type. For example, in addition to slack, you might register slack compatible service that leverages Mattermost : # Slack based notifier with name mattermost service.slack.mattermost : | apiURL: https://my-mattermost-url.com/api token: $slack-token Service Types \u00b6 Slack Opsgenie Grafana Webhook Telegram","title":"Overview"},{"location":"services/overview/#sensitive-data","text":"Sensitive data like authentication tokens should be stored in argocd-notifications-secret Secret and can be referenced in service configuration using $<secret-key> format. For example $slack-token referencing value of key slack-token in argocd-notifications-secret Secret.","title":"Sensitive Data"},{"location":"services/overview/#custom-names","text":"Service custom names allow configuring two instances of the same service type. For example, in addition to slack, you might register slack compatible service that leverages Mattermost : # Slack based notifier with name mattermost service.slack.mattermost : | apiURL: https://my-mattermost-url.com/api token: $slack-token","title":"Custom Names"},{"location":"services/overview/#service-types","text":"Slack Opsgenie Grafana Webhook Telegram","title":"Service Types"},{"location":"services/slack/","text":"Configuration \u00b6 Create Slack Application using https://api.slack.com/apps?new_app=1 Once application is created navigate to Enter OAuth & Permissions Click Permissions under Add features and functionality section and add chat:write:bot scope. To use the optional username and icon overrides in the Slack notification service also add the chat:write.customize scope. Scroll back to the top, click 'Install App to Workspace' button and confirm the installation. Once installation is completed copy the OAuth token. Finally use the OAuth token to configure the slack integration in the argocd-notifications-secret secret: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.slack : | apiURL: <url> # optional URL, e.g. https://my-mattermost-url.com/api token: $slack-token username: <override-username> # optional username icon: <override-icon> # optional icon for the message (supports both emoij and url notation) apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : token : <auth-token> Templates \u00b6 Notification templates can be customized to leverage slack message blocks and attachments feature . The message blocks and attachments can be specified in blocks and attachments string fields under slack field: template.app-sync-status : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. slack: attachments: | [{ \"title\": \"{{.app.metadata.name}}\", \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"color\": \"#18be52\", \"fields\": [{ \"title\": \"Sync Status\", \"value\": \"{{.app.status.sync.status}}\", \"short\": true }, { \"title\": \"Repository\", \"value\": \"{{.app.spec.source.repoURL}}\", \"short\": true }] }]","title":"Slack"},{"location":"services/slack/#configuration","text":"Create Slack Application using https://api.slack.com/apps?new_app=1 Once application is created navigate to Enter OAuth & Permissions Click Permissions under Add features and functionality section and add chat:write:bot scope. To use the optional username and icon overrides in the Slack notification service also add the chat:write.customize scope. Scroll back to the top, click 'Install App to Workspace' button and confirm the installation. Once installation is completed copy the OAuth token. Finally use the OAuth token to configure the slack integration in the argocd-notifications-secret secret: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.slack : | apiURL: <url> # optional URL, e.g. https://my-mattermost-url.com/api token: $slack-token username: <override-username> # optional username icon: <override-icon> # optional icon for the message (supports both emoij and url notation) apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : token : <auth-token>","title":"Configuration"},{"location":"services/slack/#templates","text":"Notification templates can be customized to leverage slack message blocks and attachments feature . The message blocks and attachments can be specified in blocks and attachments string fields under slack field: template.app-sync-status : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. slack: attachments: | [{ \"title\": \"{{.app.metadata.name}}\", \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"color\": \"#18be52\", \"fields\": [{ \"title\": \"Sync Status\", \"value\": \"{{.app.status.sync.status}}\", \"short\": true }, { \"title\": \"Repository\", \"value\": \"{{.app.spec.source.repoURL}}\", \"short\": true }] }]","title":"Templates"},{"location":"services/telegram/","text":"Telegram \u00b6 Do you need Telegram support? Please consider contributing or thumbs up feature request !","title":"Telegram"},{"location":"services/telegram/#telegram","text":"Do you need Telegram support? Please consider contributing or thumbs up feature request !","title":"Telegram"},{"location":"services/webhook/","text":"Configuration \u00b6 Requires version v0.6+ The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update Github commit status. Use the following steps to configure webhook: 1 Register webhook in argocd-notifications-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.<webhook-name> : | url: https://<hostname>/<optional-path> headers: #optional headers - name: <header-name> value: <header-value> basicAuth: #optional username password username: <username> password: <api-key> 2 Define template that customizes webhook request method, path and body: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : template.github-commit-status : | webhook: <webhook-name>: method: POST # one of: GET, POST, PUT, PATCH. Default value: GET path: <optional-path-template> body: | <optional-body-template> Examples \u00b6 Set Github commit status \u00b6 apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: https://api.github.com headers: #optional headers - name: Authorization value: token $github-token 2 Define template that customizes webhook request method, path and body: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: https://api.github.com headers: #optional headers - name: Authorization value: token $github-token template.github-commit-status : | webhook: github: method: POST path: /repos/{{call .repo.FullNameByRepoURL .app.spec.source.repoURL}}/statuses/{{.app.status.operationState.operation.sync.revision}} body: | { {{if eq .app.status.operationState.phase \"Running\"}} \"state\": \"pending\"{{end}} {{if eq .app.status.operationState.phase \"Succeeded\"}} \"state\": \"success\"{{end}} {{if eq .app.status.operationState.phase \"Error\"}} \"state\": \"error\"{{end}} {{if eq .app.status.operationState.phase \"Failed\"}} \"state\": \"error\"{{end}}, \"description\": \"ArgoCD\", \"target_url\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"context\": \"continuous-delivery/{{.app.metadata.name}}\" } Start Jenkins Job \u00b6 apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: http://<jenkins-host>/job/<job-name>/build?token=<job-secret> basicAuth: username: <username> password: <api-key> type : Opaque","title":"Webhook"},{"location":"services/webhook/#configuration","text":"Requires version v0.6+ The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update Github commit status. Use the following steps to configure webhook: 1 Register webhook in argocd-notifications-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.<webhook-name> : | url: https://<hostname>/<optional-path> headers: #optional headers - name: <header-name> value: <header-value> basicAuth: #optional username password username: <username> password: <api-key> 2 Define template that customizes webhook request method, path and body: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : template.github-commit-status : | webhook: <webhook-name>: method: POST # one of: GET, POST, PUT, PATCH. Default value: GET path: <optional-path-template> body: | <optional-body-template>","title":"Configuration"},{"location":"services/webhook/#examples","text":"","title":"Examples"},{"location":"services/webhook/#set-github-commit-status","text":"apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: https://api.github.com headers: #optional headers - name: Authorization value: token $github-token 2 Define template that customizes webhook request method, path and body: apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: https://api.github.com headers: #optional headers - name: Authorization value: token $github-token template.github-commit-status : | webhook: github: method: POST path: /repos/{{call .repo.FullNameByRepoURL .app.spec.source.repoURL}}/statuses/{{.app.status.operationState.operation.sync.revision}} body: | { {{if eq .app.status.operationState.phase \"Running\"}} \"state\": \"pending\"{{end}} {{if eq .app.status.operationState.phase \"Succeeded\"}} \"state\": \"success\"{{end}} {{if eq .app.status.operationState.phase \"Error\"}} \"state\": \"error\"{{end}} {{if eq .app.status.operationState.phase \"Failed\"}} \"state\": \"error\"{{end}}, \"description\": \"ArgoCD\", \"target_url\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\", \"context\": \"continuous-delivery/{{.app.metadata.name}}\" }","title":"Set Github commit status"},{"location":"services/webhook/#start-jenkins-job","text":"apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.webhook.github : | url: http://<jenkins-host>/job/<job-name>/build?token=<job-secret> basicAuth: username: <username> password: <api-key> type : Opaque","title":"Start Jenkins Job"},{"location":"upgrading/0.x-1.0/","text":"v0.x to v1.0 \u00b6 The v1.0 release introduces a lot of new features and changes the format of configuration settings to improve usability. However, most of the pre-v1.0 settings and annotations are still supported. So you can upgrade with a minimal set of manual changes and migrate to new settings gradually. Breaking Changes \u00b6 This section lists breaking changes that could not be done in a backward compatible way and corresponding upgrade steps: Built-in triggers and templates are removed \u00b6 Built-in (hard-coded) triggers and template were replaced with catalog . Why was it changed? The built-in triggers and templates were meant to simplify onboarding. Instead of configuring everything from scratch user could just use triggers and templates developed by the community. However one set of triggers and templates don't work for everyone. So instead of baking it into binary triggers and templates now can be distributed as a simple YAML file. All built-in triggers and templates were moved into catalog/install.yaml After upgrading make sure to either kubectl apply it: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml or include as a patch into your kustomization.yaml file: apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://github.com/argoproj-labs/argocd-notifications/manifests/bot?ref=release-v1.0 patchesStrategicMerge : - https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml Webhook Subscriptions \u00b6 The webhook recipient annotation value had special format: webhook:<webhook-name> (e.g. on-app-synced.recipients.argocd-notifications.argoproj.io: webhook:github ). In v1.0 the annotation value has to change to just github and webhook: prefix should be removed. Why was it changed? Previous way to configure notification services did not allow to give a custom service name, so you could configure only one Slack or email integation. The webhook was an exception and relied on webhook:<name> format to support multiple webhook types. The v1.0 allows giving a custom name to any service and exception for webhook no longer required. Upgrading To New Settings and Annotations \u00b6 Notification Services \u00b6 The notifiers.yaml key of argocd-notifications-secret is replaced with service.<service-type>(.<service-name>) keys in argocd-notifications-cm ConfigMap. Why was it changed? The change allows to provide custom name to any service and enables support for more than one Slack/Email etc integation. Before apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> After apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.email : | host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: $email-username password: $email-password Sensitive values like tokens and password are still stored in argocd-notifications-secret Secret and can be referenced as $<key-name> . Custom Triggers and Templates \u00b6 Why was it changed? The change allows to distribute templates and triggers as ConfigMap merge patch and enables templates/triggers catalogs. The custom triggers and templates are no longer stored in config.yaml format. Instead you can use trigger.<trigger-name> and template.<template-name> keys. Before apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. After apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Triggers define the condition when the notification should be sent and list of templates required to generate the message # Recipients can subscribe to the trigger and specify the required message template and destination notification service. trigger.on-sync-status-unknown : | - when: app.status.sync.status == 'Unknown' send: [my-custom-template] # Templates are used to generate the notification template message template.app-sync-status : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. Trigger Definition \u00b6 Trigger fields has changed. The v1.0 trigger might include multiple conditions and multiple templates in each condition. Why was it changed? Multiple conditions allows to create condition bundles that improves user experience. Before name : on-sync-status-unknown condition : app.status.sync.status == 'Unknown' template : app-sync-status enabled : true After - when : app.status.sync.status == 'Unknown' send : [ my-custom-template ] Recipient/Subscription Annotation \u00b6 The <trigger-name>.recipients.argocd-notifications.argoproj.io: <service>:<recipient> annotation has been replaced with notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation. Why was it changed? The goal is to generalize Argo CD Notifications settings and reuse the same format in other Argo projects. So we've reworked the annotation and removed argocd-notifications part. Before on-app-synced.recipients.argocd-notifications.argoproj.io: slack:my-channel After notifications.argoproj.io/subscribe.on-app-synched.slack: my-channel","title":"v0.x to v1.0"},{"location":"upgrading/0.x-1.0/#v0x-to-v10","text":"The v1.0 release introduces a lot of new features and changes the format of configuration settings to improve usability. However, most of the pre-v1.0 settings and annotations are still supported. So you can upgrade with a minimal set of manual changes and migrate to new settings gradually.","title":"v0.x to v1.0"},{"location":"upgrading/0.x-1.0/#breaking-changes","text":"This section lists breaking changes that could not be done in a backward compatible way and corresponding upgrade steps:","title":"Breaking Changes"},{"location":"upgrading/0.x-1.0/#built-in-triggers-and-templates-are-removed","text":"Built-in (hard-coded) triggers and template were replaced with catalog . Why was it changed? The built-in triggers and templates were meant to simplify onboarding. Instead of configuring everything from scratch user could just use triggers and templates developed by the community. However one set of triggers and templates don't work for everyone. So instead of baking it into binary triggers and templates now can be distributed as a simple YAML file. All built-in triggers and templates were moved into catalog/install.yaml After upgrading make sure to either kubectl apply it: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml or include as a patch into your kustomization.yaml file: apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://github.com/argoproj-labs/argocd-notifications/manifests/bot?ref=release-v1.0 patchesStrategicMerge : - https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/release-v1.0/catalog/install.yaml","title":"Built-in triggers and templates are removed"},{"location":"upgrading/0.x-1.0/#webhook-subscriptions","text":"The webhook recipient annotation value had special format: webhook:<webhook-name> (e.g. on-app-synced.recipients.argocd-notifications.argoproj.io: webhook:github ). In v1.0 the annotation value has to change to just github and webhook: prefix should be removed. Why was it changed? Previous way to configure notification services did not allow to give a custom service name, so you could configure only one Slack or email integation. The webhook was an exception and relied on webhook:<name> format to support multiple webhook types. The v1.0 allows giving a custom name to any service and exception for webhook no longer required.","title":"Webhook Subscriptions"},{"location":"upgrading/0.x-1.0/#upgrading-to-new-settings-and-annotations","text":"","title":"Upgrading To New Settings and Annotations"},{"location":"upgrading/0.x-1.0/#notification-services","text":"The notifiers.yaml key of argocd-notifications-secret is replaced with service.<service-type>(.<service-name>) keys in argocd-notifications-cm ConfigMap. Why was it changed? The change allows to provide custom name to any service and enables support for more than one Slack/Email etc integation. Before apiVersion : v1 kind : Secret metadata : name : argocd-notifications-secret stringData : notifiers.yaml : | email: host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: <myemail>@gmail.com password: <mypassword> After apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : service.email : | host: smtp.gmail.com port: 587 from: <myemail>@gmail.com username: $email-username password: $email-password Sensitive values like tokens and password are still stored in argocd-notifications-secret Secret and can be referenced as $<key-name> .","title":"Notification Services"},{"location":"upgrading/0.x-1.0/#custom-triggers-and-templates","text":"Why was it changed? The change allows to distribute templates and triggers as ConfigMap merge patch and enables templates/triggers catalogs. The custom triggers and templates are no longer stored in config.yaml format. Instead you can use trigger.<trigger-name> and template.<template-name> keys. Before apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : config.yaml : | triggers: - name: on-sync-status-unknown condition: app.status.sync.status == 'Unknown' template: app-sync-status enabled: true templates: - name: app-sync-status title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}. After apiVersion : v1 kind : ConfigMap metadata : name : argocd-notifications-cm data : # Triggers define the condition when the notification should be sent and list of templates required to generate the message # Recipients can subscribe to the trigger and specify the required message template and destination notification service. trigger.on-sync-status-unknown : | - when: app.status.sync.status == 'Unknown' send: [my-custom-template] # Templates are used to generate the notification template message template.app-sync-status : | title: Application {{.app.metadata.name}} sync status is {{.app.status.sync.status}} body: | Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}. Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.","title":"Custom Triggers and Templates"},{"location":"upgrading/0.x-1.0/#trigger-definition","text":"Trigger fields has changed. The v1.0 trigger might include multiple conditions and multiple templates in each condition. Why was it changed? Multiple conditions allows to create condition bundles that improves user experience. Before name : on-sync-status-unknown condition : app.status.sync.status == 'Unknown' template : app-sync-status enabled : true After - when : app.status.sync.status == 'Unknown' send : [ my-custom-template ]","title":"Trigger Definition"},{"location":"upgrading/0.x-1.0/#recipientsubscription-annotation","text":"The <trigger-name>.recipients.argocd-notifications.argoproj.io: <service>:<recipient> annotation has been replaced with notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation. Why was it changed? The goal is to generalize Argo CD Notifications settings and reuse the same format in other Argo projects. So we've reworked the annotation and removed argocd-notifications part. Before on-app-synced.recipients.argocd-notifications.argoproj.io: slack:my-channel After notifications.argoproj.io/subscribe.on-app-synched.slack: my-channel","title":"Recipient/Subscription Annotation"}]}