// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/argoproj-labs/argocd-notifications/pkg (interfaces: Notifier)

// Package mocks is a generated GoMock package.
package mocks

import (
	services "github.com/argoproj-labs/argocd-notifications/pkg/services"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// AddService mocks base method
func (m *MockNotifier) AddService(arg0 string, arg1 services.NotificationService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddService", arg0, arg1)
}

// AddService indicates an expected call of AddService
func (mr *MockNotifierMockRecorder) AddService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockNotifier)(nil).AddService), arg0, arg1)
}

// GetServices mocks base method
func (m *MockNotifier) GetServices() map[string]services.NotificationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices")
	ret0, _ := ret[0].(map[string]services.NotificationService)
	return ret0
}

// GetServices indicates an expected call of GetServices
func (mr *MockNotifierMockRecorder) GetServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockNotifier)(nil).GetServices))
}

// Send mocks base method
func (m *MockNotifier) Send(arg0 map[string]interface{}, arg1 string, arg2 services.Destination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNotifierMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotifier)(nil).Send), arg0, arg1, arg2)
}
